name: tag

on:
  push:
    tag:
      - 'v1.0.*-staging'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Install required packages
      run: sudo apt-get install -f yamllint shellcheck

    - name: Run shell check
      run: |
        pushd cicd/application
        make shellcheck
        popd

    - name: Run shell check
      run: |
        pushd cicd/application
        make docker-lint
        popd

    - name: Run shell check
      run: |
        pushd cicd/application
        make yaml-lint
        popd
  test-k8s-minikube:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v2

    - name: Install minikube
      run: |
        curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        chmod +x minikube
        sudo mv ./minikube /usr/local/bin

    - uses: azure/setup-kubectl@v1

    - name: Install kubernetes
      run:
        minikube start --driver=docker

    - name: Install bats
      run: |
        git clone https://github.com/bats-core/bats-core.git
        cd bats-core/
        sudo ./install.sh /usr/local

    - name: Deploy K8S Yaml
      run: |
        pushd cicd/application
        kubectl apply -f yamls
        popd

    - name: Wait Nginx Deployment
      run: |
        #timeout 120(5*24) sec
        WAIT_TIME=0 ;until [ $WAIT_TIME -eq 24 ] || [ "3" = "$(kubectl get deployment nginx -ojsonpath='{.status.readyReplicas}')" ]; do echo "sleep ${WAIT_TIME}"; sleep 5; WAIT_TIME=$((WAIT_TIME+1)); done

    - name: Run Bats
      run: |
        pushd cicd/application
        make TYPE=minikube k8s-test
        popd

  deploy-staging:
    runs-on: ubuntu-latest
    needs: test-k8s-minikube
    steps:
    - uses: actions/checkout@v2
    - name: Set env
      run: echo ::set-env name=RELEASE_VERSION::${GITHUB_REF#refs/*/}      
    - name: Build image
      run: |
        pushd cicd/application
        make VERSION=${{ env.RELEASE_VERSION }} build-image
        popd
    - name: Docker login
      run: |
        docker login -u ${{ secrets.dockerUsername }} -p  ${{ secrets.dockerPassword}}
    - name: Push image
      run: |
        pushd cicd/application
        make VERSION=${{ env.RELEASE_VERSION }} push-image
        popd
    - uses: azure/setup-helm@v1
      with:
        version: 3.2.0
    - name: Prepare Kubectl
      run: |
        mkdir -p ~/.kube
        echo ${{ secrets.KUBECONFIG }} | base64 -d > ~/.kube/config
    - name: Deploy Helm
      run: |
        pushd cicd/application
        tag=${{ env.RELEASE_VERSION }}
        helm upgrade --install --create-namespace -n dev --set nginx.image.tag=${tag} github-dev helm/
        popd
